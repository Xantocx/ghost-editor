// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Timestamp {
  id        Int @id @default(autoincrement())
  timestamp Int     @default(0)
}

model File {
  id Int @id @default(autoincrement())

  filePath String @unique
  eol      String

  lines  Line[]  @relation("LinesInFile")
  blocks Block[] @relation("BlocksInFile")

  deletedBlocks Block[] @relation("DeletedBlocksInFile")
}

// Only supported in Postgres
//enum BlockType {
//  ROOT
//  INLINE
//  CLONE
//}

model Block {
  id Int @id @default(autoincrement())

  blockId String @unique

  fileId Int?
  file   File? @relation("BlocksInFile", fields: [fileId], references: [id], onDelete: Cascade)

  fileIdAfterDeletion Int?
  fileAfterDeletion   File? @relation("DeletedBlocksInFile", fields: [fileIdAfterDeletion], references: [id], onDelete: Cascade)

  type      String // BlockType
  timestamp Int

  lines Line[] @relation("LinesInBlocks")
  tags  Tag[]  @relation("TagsCreatedByBlock")

  representedTag Tag? @relation("BlockForTag")

  parentId Int?
  parent   Block?  @relation("ChildrenInParent", fields: [parentId], references: [id], onDelete: Cascade)
  children Block[] @relation("ChildrenInParent") // always inline blocks that have the same heads

  originId Int?
  origin   Block?  @relation("ClonedBlocksOfOrigin", fields: [originId], references: [id])
  clones   Block[] @relation("ClonedBlocksOfOrigin") // always clone blocks with new heads

  createdVersions Version[] @relation("VersionsFromSourceBlock")

  aiVersionNameHistory String @default("[]")

  @@index([fileId])
}

// Only supported in Postgres
//enum LineType {
//  ORIGINAL
//  INSERTED
//}

model Line {
  id Int @id @default(autoincrement())

  fileId Int
  file   File @relation("LinesInFile", fields: [fileId], references: [id], onDelete: Cascade)

  order Float
  type  String // LineType

  versions Version[] @relation("VersionsInLine")
  blocks   Block[]   @relation("LinesInBlocks")

  @@index([order(sort: Asc), fileId])
}

// Only supported in Postgres
//enum VersionType {
//  IMPORTED
//  PRE_INSERTION
//  INSERTION
//  CLONE
//  CHANGE
//  DELETION
//}

model Version {
  id Int @id @default(autoincrement())

  lineId Int
  line   Line @relation("VersionsInLine", fields: [lineId], references: [id], onDelete: Cascade)

  type      String // VersionType
  timestamp Int
  isActive  Boolean
  content   String

  originId Int?
  origin   Version?  @relation("ForksOfOrigin", fields: [originId], references: [id])
  forks    Version[] @relation("ForksOfOrigin")

  sourceBlockId Int?
  sourceBlock   Block? @relation("VersionsFromSourceBlock", fields: [sourceBlockId], references: [id])

  @@index([timestamp(sort: Asc)])
}

model Tag {
  id Int @id @default(autoincrement())

  tagId String @unique

  sourceBlockId Int
  sourceBlock   Block @relation("TagsCreatedByBlock", fields: [sourceBlockId], references: [id], onDelete: Cascade)

  tagBlockId Int @unique
  tagBlock   Block @relation("BlockForTag", fields: [tagBlockId], references: [id], onDelete: Cascade)

  name        String
  timestamp   Int
  code        String
  description String

  @@index([sourceBlockId])
}
