// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id Int @id @default(autoincrement())

  filePath String @unique
  eol      String

  lines  Line[]  @relation("LinesInFile")
  blocks Block[] @relation("BlocksInFile")
}

enum LineType {
  ORIGINAL
  INSERTED
}

model Line {
  id Int @id @default(autoincrement())

  fileId Int
  file   File @relation("LinesInFile", fields: [fileId], references: [id], onDelete: Cascade)

  order Float

  lineType LineType

  versions Version[] @relation("VersionsInLine")

  blocks Block[] @relation("LinesInBlocks")

  heads Head[] @relation("HeadsForLine")

  @@index([order(sort: Asc), fileId])
}

enum VersionType {
  IMPORTED
  LAST_IMPORTED
  PRE_INSERTION
  INSERTION
  CHANGE
  DELETION
}

model Version {
  id Int @id @default(autoincrement())

  lineId Int
  line   Line @relation("VersionsInLine", fields: [lineId], references: [id], onDelete: Cascade)

  versionType VersionType

  timestamp         Int   @unique
  trackedTimestamps Int[]

  isActive Boolean

  content String

  originId Int?
  origin   Version?  @relation("ClonedVersionsOfOrigin", fields: [originId], references: [id])
  clones   Version[] @relation("ClonedVersionsOfOrigin")

  sourceBlockId Int?
  sourceBlock   Block? @relation("VersionsFromSourceBlock", fields: [sourceBlockId], references: [id])

  heads Head[] @relation("HeadsFromVersion")

  @@index([timestamp(sort: Asc)])
}

model Block {
  id Int @id @default(autoincrement())

  blockId String @unique

  fileId Int
  file   File @relation("BlocksInFile", fields: [fileId], references: [id], onDelete: Cascade)

  isRoot Boolean

  lines Line[] @relation("LinesInBlocks")

  heads Head[] @relation("HeadsForBlock")

  tags Tag[] @relation("TagsForBlock")

  parentId Int?
  parent   Block?  @relation("ChildrenInParent", fields: [parentId], references: [id])
  children Block[] @relation("ChildrenInParent")

  originId Int?
  origin   Block?  @relation("ClonedBlocksOfOrigin", fields: [originId], references: [id])
  clones   Block[] @relation("ClonedBlocksOfOrigin")

  createdVersions Version[] @relation("VersionsFromSourceBlock")

  @@index([fileId])
}

model Head {
  id Int @id @default(autoincrement())

  blockId Int
  block   Block @relation("HeadsForBlock", fields: [blockId], references: [id], onDelete: Cascade)

  lineId Int
  line   Line @relation("HeadsForLine", fields: [lineId], references: [id])

  versionId Int
  version   Version @relation("HeadsFromVersion", fields: [versionId], references: [id])

  @@unique([blockId, lineId])
  @@index([blockId, lineId])
}

model Tag {
  id Int @id @default(autoincrement())

  tagId String @unique

  blockId Int
  block   Block @relation("TagsForBlock", fields: [blockId], references: [id], onDelete: Cascade)

  name      String
  timestamp Int    @unique
  code      String

  @@index([blockId])
}
